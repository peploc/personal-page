@import 'variables';
@import 'colors';

@mixin flexCenter {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin icon($side, $containerSide, $iconColor, $containerColor) {
  @include flexCenter;
  position: relative;
  height: $containerSide;
  width: $containerSide;
  border-radius: 100%;
  background-color: $containerColor;
  cursor: pointer;
  overflow: hidden;
  & svg {
    z-index: 3;
    position: relative;
    height: $side;
    width: $side;
    min-height: $side;
    min-width: $side;
    max-height: $side;
    max-width: $side;
    color: $iconColor;
  }
}

@mixin smallIcon(
  $animated: true,
  $iconColor: $text,
  $containerColor: $primaryMain,
  $fillColor: $secondaryMain
) {
  @include icon($smallIconSide, $smallIconContainerSide, $iconColor, $containerColor);
  @if $animated {
    @include iconAnimationFill($smallIconSide, $fillColor);
  }
}

@mixin iconAnimationFill($iconSize, $fillColor) {
  &::before {
    content: '';
    position: absolute;
    z-index: 3;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    transition: box-shadow 0.5s ease;
    border-radius: 100%;
  }
  &::before {
    box-shadow: inset 0 0 0 0 $fillColor;
  }
  &:hover::before {
    box-shadow: inset 0 0 0 $iconSize $fillColor;
  }
}

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}
